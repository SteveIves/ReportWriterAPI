
import System
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text

namespace ReportWriterAPI

    ;;; <summary>
    ;;; 
    ;;; </summary>
    public class Report

        private currentLine, @ReportLineBase

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="aReportFile"></param>
        public method Report
            required in aReportFile, string
        proc
            ParseReportDefinition(aReportFile)
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="aReportFile"></param>
        private method parseReportDefinition, void
            required in aReportFile, string
        proc
            ; Verify that the file exists
            if (!File.Exists(aReportFile))
            begin
                throw new ApplicationException("ERROR: Report schema {0} was not found!")
            end

            ; Load the report definition into a list, removing blank lines and comments
            data schemaRecords = new List<string>(File.ReadAllLines(aReportFile)
            &    .Where(lambda(s) { !String.IsNullOrWhiteSpace(s) && !s.Trim().StartsWith(";") } )
            &   .ToList<string>())

            ; Was the file empty?
            if (schemaRecords.Count == 0)
            begin
                throw new ApplicationException(String.Format("ERROR: Report schema {0} is empty!",aReportFile))
            end

            ; Consolidate multiple lines into single lines
            data lineNumber = 0
            while (lineNumber < schemaRecords.Count)
            begin
                if (schemaRecords[lineNumber].StartsWith("    ")) then
                begin
                    schemaRecords[lineNumber-1] = schemaRecords[lineNumber-1].Trim() + " " + schemaRecords[lineNumber].Trim()
                    schemaRecords.RemoveAt(lineNumber)
                end
                else if (schemaRecords[lineNumber].StartsWith("REPORT")) then
                begin
                    schemaRecords[lineNumber] = schemaRecords[lineNumber].Replace(%char(9),%char(32))
                    lineNumber += 1
                end
                else
                begin
                    lineNumber += 1
                end
            end

            ; Now process the content of the report schema

            data schemaRecord, string

            foreach schemaRecord in schemaRecords
            begin
                if (schemaRecord.StartsWith("REPORT ")) then
                begin
                    ;Extact the report name
                    schemaRecord = schemaRecord.Replace("REPORT ","")
                    Name = schemaRecord.Replace('"','')
                end
                else if (schemaRecord.StartsWith("FILE")) then
                begin
                    ReportFiles.Add(new ReportFile(schemaRecord))
                end
                else if (schemaRecord.StartsWith("CALCULATION")) then
                begin
                    CalculationFields.Add(new CalculationField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("ENVIRONMENT")) then
                begin
                    EnvironmentFields.Add(new EnvironmentField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("QUESTION")) then
                begin
                    QuestionFields.Add(new QuestionField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("SUBTOTAL")) then
                begin
                    SubtotalAccessFields.Add(new SubtotalAccessField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("TEMPTEXT")) then
                begin
                    TempTextFields.Add(new TempTextField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("SELECT")) then
                begin
                    Selections.Add(new Selection(schemaRecord))
                end
                else if (schemaRecord.StartsWith("SORT")) then
                begin
                    SortFields.Add(new SortField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("LINE REPORT_HEADER")) then
                begin
                    currentLine = new ReportHeaderLine(schemaRecord)
                    ReportHeaderLines.Add((@ReportHeaderLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE REPORT_FOOTER")) then
                begin
                    currentLine = new ReportFooterLine(schemaRecord)
                    ReportFooterLines.Add((@ReportFooterLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE PAGE_HEADER")) then
                begin
                    currentLine = new PageHeaderLine(schemaRecord)
                    PageHeaderLines.Add((@PageHeaderLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE PAGE_FOOTER")) then
                begin
                    currentLine = new PageFooterLine(schemaRecord)
                    PageFooterLines.Add((@PageFooterLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE PRE-BREAK")) then
                begin
                    currentLine = new PrePostBreakLine(schemaRecord)
                    PreBreakLines.Add((@PrePostBreakLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE POST-BREAK")) then
                begin
                    currentLine = new PrePostBreakLine(schemaRecord)
                    PostBreakLines.Add((@PrePostBreakLine)currentLine)
                end
                else if (schemaRecord.StartsWith("LINE DETAIL")) then
                begin
                    currentLine = new DetailLine(schemaRecord)
                    DetailLines.Add((@DetailLine)currentLine)
                end
                else if (schemaRecord.StartsWith("FIELD")) then
                begin
                    currentLine.Fields.Add(new Field(schemaRecord))
                end
                else if (schemaRecord.StartsWith("TEXT")) then
                begin
                    currentLine.TextFields.Add(new TextField(schemaRecord))
                end
                else if (schemaRecord.StartsWith("MISCELLANEOUS"))
                begin
                    Settings.Update(schemaRecord)
                end
            end
        endmethod

        ;;; <summary>
        ;;; The name of the report
        ;;; </summary>
        public readwrite property Name, string

        ;;; <summary>
        ;;; Various report settings, either default values or overriden by a MISCALLANEOUS statement in the report schema.
        ;;; </summary>
        public readwrite property Settings, @ReportSettings, new ReportSettings()

        ;;; <summary>
        ;;; A collection of calculated fields defined in the report.
        ;;; </summary>
        public readwrite property CalculationFields, @List<CalculationField>, new List<CalculationField>()

        ;;; <summary>
        ;;; A collection of environment variable fields defined in the report.
        ;;; </summary>
        public readwrite property EnvironmentFields, @List<EnvironmentField>, new List<EnvironmentField>()

        ;;; <summary>
        ;;; A collection of files accessed by the report.
        ;;; </summary>
        public readwrite property ReportFiles, @List<ReportFile>, new List<ReportFile>()

        ;;; <summary>
        ;;; A collection of question fields defined in the report.
        ;;; </summary>
        public readwrite property QuestionFields, @List<QuestionField>, new List<QuestionField>()

        ;;; <summary>
        ;;; A collection of field selections defined in the report.
        ;;; </summary>
        public readwrite property Selections, @List<Selection>, new List<Selection>()

        ;;; <summary>
        ;;; A collection of sort fields defined in the report.
        ;;; </summary>
        public readwrite property SortFields, @List<SortField>, new List<SortField>()

        ;;; <summary>
        ;;; A collection of subtotal access fields defined in the report.
        ;;; </summary>
        public readwrite property SubtotalAccessFields, @List<SubtotalAccessField>, new List<SubtotalAccessField>()

        ;;; <summary>
        ;;; A collection of temporary text fields defined in the report.
        ;;; </summary>
        public readwrite property TempTextFields, @List<TempTextField>, new List<TempTextField>()

        ; Report sections

        ;;; <summary>
        ;;; A collection of report header lines defined by the report.
        ;;; </summary>
        public readwrite property ReportHeaderLines, @List<ReportHeaderLine>, new List<ReportHeaderLine>()

        ;;; <summary>
        ;;; A collection of page header lines defined by the report.
        ;;; </summary>
        public readwrite property PageHeaderLines, @List<PageHeaderLine>, new List<PageHeaderLine>()

        ;;; <summary>
        ;;; A collection of pre-break lines defined by the report.
        ;;; </summary>
        public readwrite property PreBreakLines, @List<PrePostBreakLine>, new List<PrePostBreakLine>()

        ;;; <summary>
        ;;; A collection of detail lines defined by the report.
        ;;; </summary>
        public readwrite property DetailLines, @List<DetailLine>, new List<DetailLine>()

        ;;; <summary>
        ;;; A collection of post-break lines defined by the report.
        ;;; </summary>
        public readwrite property PostBreakLines, @List<PrePostBreakLine>, new List<PrePostBreakLine>()

        ;;; <summary>
        ;;; A collection of page footer lines defined by the report.
        ;;; </summary>
        public readwrite property PageFooterLines, @List<PageFooterLine>, new List<PageFooterLine>()

        ;;; <summary>
        ;;; A collection of report footer lines defined by the report.
        ;;; </summary>
        public readwrite property ReportFooterLines, @List<ReportFooterLine>, new List<ReportFooterLine>()

    endclass

endnamespace
